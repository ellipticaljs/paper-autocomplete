{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`paper-autocomplete-suggestions`\n\n*From v4.x.x, this component only works with Polymer 3.**\n\n  [![Published on webcomponents.org](https://img.shields.io/badge/webcomponents.org-published-blue.svg)](https://www.webcomponents.org/element/ellipticaljs/paper-autocomplete)\n\n  Allows to add autocomplete capabilities to any input field. This is desirable when you have an input field with custom\n  logic and you just want to add the feature to help users with the selection. If you want to use it in combination with\n  a regular `<paper-input>`, you can use `<paper-autocomplete>`.\n\n  Example:\n  ```\n  <div class=\"autocomplete-wrapper\">\n    <paper-input id=\"myInput\" label=\"Select State\"></paper-input>\n\n    <paper-autocomplete-suggestions\n      for=\"myInput\"\n      source=\"[[accounts]]\"></paper-autocomplete-suggestions>\n  </div>\n  ```\n\n  It is **important to provide both `textProperty` and `valueProperty` when working with a custom search function and\n  or custom templates.** They are needed to keep the component accessible and for the events (e.g. onSelect) to keep\n  working.\n\n  ### About Polymer 1.x and 2.x Compatibility\n  From version `3.x.x`, this component work with both Polymer 1.7+ or Polymer 2.0+ Please take a look to the\n  [MIGRATION.md](./MIGRATION.md) file that contains more information.\n\n  ### Custom search\n  This component has the public method `queryFn` that is called in each key stroke and it is responsible to query\n  all items in the `source` and returns only those items that matches certain filtering criteria. By default, this\n  component search for items that start with the recent query (case insensitive).\n  You can override this behavior providing your own query function, as long as these two requirements are fulfill:\n\n  - The query function is synchronous.\n  - The API is respected and the method always return an Array.\n\n  The template use to render each suggestion depends on the structure of each object that this method returns. For the\n  default template, each suggestion should follow this object structure:\n\n  ```\n    {\n      text: objText,\n      value: objValue\n    }\n  ```\n\n  This function is only used when a local data source is used. When using a `remoteDataSource` user is responsible of\n  doing the search and specify suggestions manually.\n\n  ### Custom templates\n  A template for each suggestion can be provided, but for now, there are limitations in the way you can customize\n  the template. Please read the the following sections carefully.\n  In order to set your own template, you need to add a `<template>` tag with the slot name\n  `autocomplete-custom-template` and a structure equivalent to the one shown in the `<account-autocomplete>` component in\n  the demo.\n\n  You need to always maintain this structure. Then you can customize the content of paper-item. These are the reasons\n  why you need to maintain it:\n\n  - `onSelectHandler` it is very important because it will notify the `autocomplete` component when user selects one item.\n  If you don't add this option, when user clicks in one of the items, nothing will happen.\n  - `id`, `role` and `aria-selected` need to be there for accessibility reasons. If you don't set them, the component\n  will continue working but it will not be accessible for user with disabilities.\n\n  It is important to clarify that methods `_onSelect` and `_getSuggestionId` do not need to be implemented. They are\n  part of the logic of `paper-autocomplete-suggestions`.\n\n  When providing your own custom template, you might also need to provide your own custom search function. The reason\n  for that is that the default search function only exposes text and value in the results. If each item in your data\n  source contains more information, then you won't be able to access it. See the code of `<address-autocomplete>`\n  element in the demo folder for a complete example.\n\n  Another important thing to point out is related to the height of each suggestion item in the results. The height of\n  the suggestion template changes dynamically depending on the height of a suggestion item. However, the following\n  assumptions were made:\n  - All suggestions items have the same height\n  - The height of each item is fixed and can be determined at any time. For example, if you want to use images in the\n  results, make sure they have a placeholder or a fixed height.\n\n  ### Styling\n\n  `<paper-autocomplete-suggestions>` provides the following custom properties and mixins\n  for styling:\n\n  Custom property | Description | Default\n  ----------------|-------------|----------\n  `--paper-item-min-height` | paper item min height | `36px`\n  `--suggestions-wrapper` | mixin to apply to the suggestions container | `{}`\n  `--suggestions-item` | mixin to apply to the suggestions items | `{}`\n\n  ### Accessibility\n  This component exposes certain necessary values in order to make your component accessible. When checking the ARIA\n  specs, it is said that you need to inform users of the following changes:\n  - Whether the popup with suggestions is open or not.\n  - Id of the currently highlighted element\n\n You can access these values using the following properties: `isOpen` and `highlightedSuggestion`. The id of each\n element in highlightedSuggestion a random and unique id.\n\n In addition, as long as developers follow the general structure of each suggestion template, the following A11Y\n features are set in each suggestion:\n - `role=\"option\"`\n - `aria-selected=\"true|false\"`. This value will be false for all suggestion except in the one which is currently\n highlighted.\n\n By default, suggestions are only displayed after the user types, even if the current input should display them. If\n  you want to show suggestions on focus (when available), you should add the property `show-results-on-focus`.",
      "summary": "",
      "path": "paper-autocomplete-suggestions.js",
      "properties": [
        {
          "name": "for",
          "type": "string | null | undefined",
          "description": "Id of input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 2
            },
            "end": {
              "line": 216,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "isOpen",
          "type": "boolean | null | undefined",
          "description": "`true` if the suggestions list is open, `false otherwise`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 2
            },
            "end": {
              "line": 225,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "minLength",
          "type": "number | null | undefined",
          "description": "Minimum length to trigger suggestions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 2
            },
            "end": {
              "line": 233,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "maxViewableItems",
          "type": "number | null | undefined",
          "description": "Max number of suggestions to be displayed without scrolling",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 2
            },
            "end": {
              "line": 241,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "7"
        },
        {
          "name": "textProperty",
          "type": "string | null | undefined",
          "description": "Property of local datasource to as the text property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 2
            },
            "end": {
              "line": 249,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"text\""
        },
        {
          "name": "valueProperty",
          "type": "string | null | undefined",
          "description": "Property of local datasource to as the value property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 2
            },
            "end": {
              "line": 257,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"value\""
        },
        {
          "name": "source",
          "type": "Array | null | undefined",
          "description": "`source` Array of objects with the options to execute the autocomplete feature",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 2
            },
            "end": {
              "line": 264,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "selectedOption",
          "type": "Object | null | undefined",
          "description": "Object containing information about the current selected option. The structure of the object depends on the\n structure of each element in the data source.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 2
            },
            "end": {
              "line": 273,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "remoteSource",
          "type": "boolean | null | undefined",
          "description": "Binds to a remote data source",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 2
            },
            "end": {
              "line": 281,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "eventNamespace",
          "type": "string | null | undefined",
          "description": "Event type separator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 2
            },
            "end": {
              "line": 289,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"-\""
        },
        {
          "name": "highlightedSuggestion",
          "type": "Object | null | undefined",
          "description": "Current highlighted suggestion. The structure of the object is:\n```\n{\n   elementId: ID // id of the highlighted DOM element\n   option: // highlighted option data\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 2
            },
            "end": {
              "line": 304,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "queryFn",
          "type": "Function | null | undefined",
          "description": "Function used to filter available items. This function is actually used by paper-autocomplete-suggestions,\nit is also exposed here so it is possible to provide a custom queryFn.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 310,
              "column": 2
            },
            "end": {
              "line": 312,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          }
        },
        {
          "name": "highlightFirst",
          "type": "boolean | null | undefined",
          "description": "If `true`, it will always highlight the first result each time new suggestions are presented.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 2
            },
            "end": {
              "line": 320,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "showResultsOnFocus",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to show available suggestions on focus. This overrides the default behavior that only shows\nnotifications after user types",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 326,
              "column": 2
            },
            "end": {
              "line": 329,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_suggestions",
          "type": "Array | null | undefined",
          "description": "`_suggestions` Array with the actual suggestions to display",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 334,
              "column": 2
            },
            "end": {
              "line": 337,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_onSuggestionsChanged\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_currentIndex",
          "type": "number | null | undefined",
          "description": "Indicates the position in the suggestions popup of the currently highlighted element, being `0` the first one,\nand `this._suggestions.length - 1` the position of the last one.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 2
            },
            "end": {
              "line": 346,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "-1"
        },
        {
          "name": "_scrollIndex",
          "type": "number | null | undefined",
          "description": "Indicates the current position of the scroll. Then the `scrollTop` position is calculated multiplying the\n`_itemHeight` with the current index.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 2
            },
            "end": {
              "line": 355,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "_itemHeight",
          "type": "number | null | undefined",
          "description": "Height of each suggestion element in pixels",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 360,
              "column": 2
            },
            "end": {
              "line": 364,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_itemHeightChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "36"
        },
        {
          "name": "_value",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 2
            },
            "end": {
              "line": 368,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_text",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 370,
              "column": 2
            },
            "end": {
              "line": 372,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_idItemSeed",
          "type": "string | null | undefined",
          "description": "This value is used as a base to generate unique individual ids that need to be added to each suggestion for\naccessibility reasons.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 2
            },
            "end": {
              "line": 382,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_bindedFunctions",
          "type": "Object | null | undefined",
          "description": "Reference to binded functions so we can call removeEventListener on element detached",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 387,
              "column": 2
            },
            "end": {
              "line": 396,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_hasItemHighBeenCalculated",
          "type": "boolean | null | undefined",
          "description": "Indicates if the the height of each suggestion item has been already calculated.\nThe assumption is that item height is fixed and it will not change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 402,
              "column": 2
            },
            "end": {
              "line": 405,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "__customTplRef",
          "type": "Object | null | undefined",
          "description": "To avoid unnecessary access to the DOM, we keep a reference to the current template being used",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 410,
              "column": 2
            },
            "end": {
              "line": 410,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_suggestionTemplate",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 552,
              "column": 1
            },
            "end": {
              "line": 560,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "templatize",
          "description": "Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\nfor the provided template.  This method should be called once per\ntemplate to prepare an element for stamping the template, followed\nby `stamp` to create new instances of the template.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/legacy/templatizer-behavior.js",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 108,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to prepare"
            },
            {
              "name": "mutableData",
              "type": "boolean=",
              "description": "When `true`, the generated class will skip\n  strict dirty-checking for objects and arrays (always consider them to\n  be \"dirty\"). Defaults to false."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Templatizer"
        },
        {
          "name": "stamp",
          "description": "Creates an instance of the template prepared by `templatize`.  The object\nreturned is an instance of the anonymous class generated by `templatize`\nwhose `root` property is a document fragment containing newly cloned\ntemplate content, and which has property accessors corresponding to\nproperties referenced in template bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/legacy/templatizer-behavior.js",
            "start": {
              "line": 123,
              "column": 2
            },
            "end": {
              "line": 125,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object=",
              "description": "Object containing initial property values to\n  populate into the template bindings."
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "Returns the created instance of\nthe template prepared by `templatize`."
          },
          "inheritedFrom": "Templatizer"
        },
        {
          "name": "modelForElement",
          "description": "Returns the template \"model\" (`TemplateInstance`) associated with\na given element, which serves as the binding scope for the template\ninstance the element is contained in.  A template model should be used\nto manipulate data associated with this template instance.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/legacy/templatizer-behavior.js",
            "start": {
              "line": 138,
              "column": 2
            },
            "end": {
              "line": 140,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "Element for which to return a template model."
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "Model representing the binding scope for\n  the element."
          },
          "inheritedFrom": "Templatizer"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 415,
              "column": 1
            },
            "end": {
              "line": 432,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 434,
              "column": 1
            },
            "end": {
              "line": 448,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 450,
              "column": 1
            },
            "end": {
              "line": 459,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getItemText",
          "description": "Get the text property from the suggestion",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 468,
              "column": 1
            },
            "end": {
              "line": 470,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "suggestion",
              "type": "Object",
              "description": "The suggestion item"
            }
          ],
          "return": {
            "type": "String"
          }
        },
        {
          "name": "_showSuggestionsWrapper",
          "description": "Show the suggestions wrapper",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 475,
              "column": 1
            },
            "end": {
              "line": 482,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hideSuggestionsWrapper",
          "description": "Hide the suggestions wrapper",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 487,
              "column": 1
            },
            "end": {
              "line": 497,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleSuggestions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 499,
              "column": 1
            },
            "end": {
              "line": 505,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_remoteSuggestions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 507,
              "column": 1
            },
            "end": {
              "line": 520,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_bindSuggestions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 522,
              "column": 1
            },
            "end": {
              "line": 530,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createSuggestions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 532,
              "column": 1
            },
            "end": {
              "line": 550,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_renderSuggestions",
          "description": "Render suggestions in the suggestionsWrapper container",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 567,
              "column": 1
            },
            "end": {
              "line": 587,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "suggestions",
              "type": "Array",
              "description": "An array containing the suggestions to be rendered. This value is not optional, so\n   in case no suggestions need to be rendered, you should either not call this method or provide an empty array."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearSuggestions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 589,
              "column": 1
            },
            "end": {
              "line": 595,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onSuggestionsChanged",
          "description": "Listener to changes to _suggestions state",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 600,
              "column": 1
            },
            "end": {
              "line": 629,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selection",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 631,
              "column": 1
            },
            "end": {
              "line": 644,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getItems",
          "description": "Get all suggestion elements",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 650,
              "column": 1
            },
            "end": {
              "line": 652,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array",
            "desc": "a list of all suggestion elements"
          }
        },
        {
          "name": "_emptyItems",
          "description": "Empty the list of current suggestions being displayed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 657,
              "column": 1
            },
            "end": {
              "line": 659,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 661,
              "column": 1
            },
            "end": {
              "line": 667,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_removeActive",
          "description": "Remove the the active state from all suggestion items",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 672,
              "column": 1
            },
            "end": {
              "line": 677,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onKeypress",
          "description": "Key press event handler",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 682,
              "column": 1
            },
            "end": {
              "line": 706,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_keyenter",
          "description": "Event handler for the key ENTER press event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 711,
              "column": 1
            },
            "end": {
              "line": 716,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_moveHighlighted",
          "description": "Move the current highlighted suggestion up or down",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 722,
              "column": 1
            },
            "end": {
              "line": 755,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "direction",
              "type": "string",
              "description": "Possible values are DIRECTION.UP or DIRECTION.DOWN"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_scroll",
          "description": "Move scroll (if needed) to display the active element in the suggestions list.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 761,
              "column": 1
            },
            "end": {
              "line": 792,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "direction",
              "type": "string",
              "description": "Direction to scroll. Possible values are `DIRECTION.UP` and `DIRECTION.DOWN`."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_resetScroll",
          "description": "Reset scroll back to zero",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 797,
              "column": 1
            },
            "end": {
              "line": 799,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setHighlightedSuggestion",
          "description": "Set the current highlighted suggestion",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 806,
              "column": 1
            },
            "end": {
              "line": 813,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "option",
              "type": "Object",
              "description": "Data of the highlighted option"
            },
            {
              "name": "elementId",
              "type": "string",
              "description": "id of the highlighted dom element."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_fireEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 815,
              "column": 1
            },
            "end": {
              "line": 826,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "option"
            },
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onSelect",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 828,
              "column": 1
            },
            "end": {
              "line": 831,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onBlur",
          "description": "Event handler for the onBlur event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 836,
              "column": 1
            },
            "end": {
              "line": 845,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onFocus",
          "description": "Event handler for the onFocus event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 850,
              "column": 1
            },
            "end": {
              "line": 861,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getSuggestionId",
          "description": "Generate a suggestion id for a certain index",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 869,
              "column": 1
            },
            "end": {
              "line": 871,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index",
              "type": "number",
              "description": "Position of the element in the suggestions list"
            }
          ],
          "return": {
            "type": "string",
            "desc": "a unique id based on the _idItemSeed and the position of that element in the suggestions popup"
          }
        },
        {
          "name": "_itemHeightChanged",
          "description": "When item height is changed, the maxHeight of the suggestionWrapper need to be updated",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 876,
              "column": 1
            },
            "end": {
              "line": 878,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "suggestions",
          "description": "Sets the component's current suggestions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 888,
              "column": 1
            },
            "end": {
              "line": 890,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "Array"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hideSuggestions",
          "description": "Hides the suggestions popup",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 895,
              "column": 1
            },
            "end": {
              "line": 900,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "queryFn",
          "description": "Query function is called on each keystroke to query the data source and returns the suggestions that matches\nwith the filtering logic included.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 909,
              "column": 1
            },
            "end": {
              "line": 935,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datasource",
              "type": "Array",
              "description": "An array containing all items before filtering"
            },
            {
              "name": "query",
              "type": "string",
              "description": "Current value in the input field"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "an array containing only those items in the data source that matches the filtering logic."
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/paper-autocomplete-suggestions-demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 139,
          "column": 8
        },
        "end": {
          "line": 986,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "for",
          "description": "Id of input",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 2
            },
            "end": {
              "line": 216,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "is-open",
          "description": "`true` if the suggestions list is open, `false otherwise`",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 2
            },
            "end": {
              "line": 225,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "min-length",
          "description": "Minimum length to trigger suggestions",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 2
            },
            "end": {
              "line": 233,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "max-viewable-items",
          "description": "Max number of suggestions to be displayed without scrolling",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 2
            },
            "end": {
              "line": 241,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "text-property",
          "description": "Property of local datasource to as the text property",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 2
            },
            "end": {
              "line": 249,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-property",
          "description": "Property of local datasource to as the value property",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 2
            },
            "end": {
              "line": 257,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "source",
          "description": "`source` Array of objects with the options to execute the autocomplete feature",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 2
            },
            "end": {
              "line": 264,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "selected-option",
          "description": "Object containing information about the current selected option. The structure of the object depends on the\n structure of each element in the data source.",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 2
            },
            "end": {
              "line": 273,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "remote-source",
          "description": "Binds to a remote data source",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 2
            },
            "end": {
              "line": 281,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "event-namespace",
          "description": "Event type separator",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 2
            },
            "end": {
              "line": 289,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "highlighted-suggestion",
          "description": "Current highlighted suggestion. The structure of the object is:\n```\n{\n   elementId: ID // id of the highlighted DOM element\n   option: // highlighted option data\n}\n```",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 2
            },
            "end": {
              "line": 304,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "query-fn",
          "description": "Function used to filter available items. This function is actually used by paper-autocomplete-suggestions,\nit is also exposed here so it is possible to provide a custom queryFn.",
          "sourceRange": {
            "start": {
              "line": 310,
              "column": 2
            },
            "end": {
              "line": 312,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Function | null | undefined"
        },
        {
          "name": "highlight-first",
          "description": "If `true`, it will always highlight the first result each time new suggestions are presented.",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 2
            },
            "end": {
              "line": 320,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "show-results-on-focus",
          "description": "Set to `true` to show available suggestions on focus. This overrides the default behavior that only shows\nnotifications after user types",
          "sourceRange": {
            "start": {
              "line": 326,
              "column": 2
            },
            "end": {
              "line": 329,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "autocomplete-blur",
          "description": "Fired on input blur",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-change",
          "description": "Fired on input change",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-focus",
          "description": "Fired on input focus",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-reset-blur",
          "description": "Fired on input reset/clear",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-selected",
          "description": "Fired when a selection is made",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "is-open-changed",
          "description": "Fired when the `isOpen` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-option-changed",
          "description": "Fired when the `selectedOption` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "highlighted-suggestion-changed",
          "description": "Fired when the `highlightedSuggestion` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-autocomplete-suggestions"
    },
    {
      "description": "`paper-autocomplete`\n\n*From v4.x.x, this component only works with Polymer 3.**\n\n  [![Published on webcomponents.org](https://img.shields.io/badge/webcomponents.org-published-blue.svg)](https://www.webcomponents.org/element/ellipticaljs/paper-autocomplete)\n\n  paper-autocomplete extends earlier efforts such as this (https://github.com/rodo1111/paper-input-autocomplete)\n  to provide keyboard support, remote binding and results scrolling.\n\n  It is **important to provide both `textProperty` and `valueProperty` when working with a custom search function and\n  or custom templates.** They are needed to keep the component accessible and for the events (e.g. onSelect) to keep\n  working.\n\n  To integrate with `iron-input`, you must set the `name` option. The selected `value` will be exposed, **not** the\n  `text` value,\n\n  ### About Polymer 1.x and 2.x Compatibility\n  From version `3.x.x`, this component work with both Polymer 1.7+ or Polymer 2.0+ Please take a look to the\n  [MIGRATION.md](./MIGRATION.md) file that contains more information.\n\n  ### Custom search\n  This component has the public method `queryFn` that is called in each key stroke and it is responsible to query\n  all items in the `source` and returns only those items that matches certain filtering criteria. By default, this\n  component searches for items that start with the recent query (case insensitive).\n  You can override this behavior providing your own query function, as long as these two requirements are fulfilled:\n  - The query function is synchronous.\n  - The API is respected and the method always returns an Array.\n  The template used to render each suggestion depends on the structure of each object that this method returns. For the\n  default template, each suggestion should follow this object structure:\n  ```\n    {\n      text: objText,\n      value: objValue\n    }\n  ```\n\n  This function is only used when a local data source is used. When using a `remoteDataSource` user is responsible for\n  doing the search and specify suggestions manually.\n\n  ### Custom templates\n  A template for each suggestion can be provided, but for now, there are limitations in the way you can customize\n  the template. Please, read this section carefully to know them.\n  In order to set your own template, you need to add a `<template>` tag with the attribute\n  `autocomplete-custom-template` and the following structure:\n\n  ```html\n  <paper-autocomplete>\n    <template autocomplete-custom-template>\n      <paper-item on-tap=\"_onSelect\" id$=\"[[_getSuggestionId(index)]]\" role=\"option\" aria-selected=\"false\">\n        <style>\n          /** Styles for your custom template here **\\/\n        </style>\n\n        YOUR CUSTOM TEMPLATE\n        <paper-ripple></paper-ripple>\n      </paper-item>\n    </template>\n  </paper-autocomplete>\n  ```\n\n  You need to always maintain this structure. Then you can customize the content of paper-item. These are the reasons\n  why you need to maintain it:\n\n  - `_onSelect` it is very important because it will notify the `autocomplete` component when user selects one item.\n  If you don't add this option, when user clicks in one of the items, nothing will happen.\n  - `id`, `role` and `aria-selected` need to be there for accessibility reasons. If you don't set them, the component\n  will continue working but it will not be accessible for users with disabilities.\n\n  It is important to clarify that methods `_onSelect` and `_getSuggestionId` do not need to be implemented. They are\n  part of the logic of `paper-autocomplete`.\n\n  When providing your own custom template, you might also need to provide your own custom search function. The reason\n  for that is that the default search function only exposes text and value in the results. If each item in your data\n  source contains more information, then you won't be able to access it. See the code of the `<address-autocomplete>`\n  element in the demo folder for a complete example.\n\n  Another important thing to point out is related to the height of each suggestion item in the results. The height of\n  the suggestion template changes dynamically depending on the height of a suggestion item. However, the following\n  assumptions were made:\n  - All suggestions items have the same height\n  - The height of each item is fixed and can be determined at any time. For example, if you want to use images in the\n  results, make sure they have a placeholder or a fixed height.\n\n  By default, suggestions are only displayed after the user types, even if the current input should display them. If\n  you want to show suggestions on focus (when available), you should add the property `show-results-on-focus`.\n\n  ### Styling\n\n  `<paper-autocomplete>` provides the following custom properties and mixins\n  for styling:\n\n  Custom property | Description | Default\n  ----------------|-------------|----------\n  `--paper-input-container-focus-color` | sets the components input container focus color | `var(--primary-color)`\n  `--paper-autocomplete-suggestions-item-min-height` | min height of each suggestion item | `36px`\n  `--paper-autocomplete-suggestions-wrapper` | mixin to apply to the suggestions container | `{}`\n\n  ### Accessibility\n\n  This component is friendly with screen readers (tested only with VoiceOver and NVDA in Windows): current selection\n  and active suggestion are announced.",
      "summary": "",
      "path": "paper-autocomplete.js",
      "properties": [
        {
          "name": "autoValidate",
          "type": "boolean | null | undefined",
          "description": "`autoValidate` Set to true to auto-validate the input value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 2
            },
            "end": {
              "line": 224,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "Setter/getter manually invalid input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 2
            },
            "end": {
              "line": 232,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "autocapitalize",
          "type": "string | null | undefined",
          "description": "`autocapitalize` Sets auto-capitalization for the input element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 236,
              "column": 2
            },
            "end": {
              "line": 236,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "`errorMessage` The error message to display when the input is invalid.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 2
            },
            "end": {
              "line": 243,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "label",
          "type": "string | null | undefined",
          "description": "`label` Text to display as the input label",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 2
            },
            "end": {
              "line": 248,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "noLabelFloat",
          "type": "boolean | null | undefined",
          "description": "`noLabelFloat` Set to true to disable the floating label.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "alwaysFloatLabel",
          "type": "boolean | null | undefined",
          "description": "`alwaysFloatLabel` Set to true to always float label",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 2
            },
            "end": {
              "line": 264,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "placeholder",
          "type": "string | null | undefined",
          "description": "The placeholder text",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 2
            },
            "end": {
              "line": 269,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "`required` Set to true to mark the input as required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 2
            },
            "end": {
              "line": 277,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "`readonly` Set to true to mark the input as readonly.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 282,
              "column": 2
            },
            "end": {
              "line": 285,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "focused",
          "type": "boolean | null | undefined",
          "description": "`focused` If true, the element currently has focus.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 290,
              "column": 2
            },
            "end": {
              "line": 294,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "`disabled` Set to true to mark the input as disabled.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 2
            },
            "end": {
              "line": 302,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "source",
          "type": "Array | null | undefined",
          "description": "`source` Array of objects with the options to execute the autocomplete feature",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 2
            },
            "end": {
              "line": 310,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_sourceChanged\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "textProperty",
          "type": "string | null | undefined",
          "description": "Property of local datasource to as the text property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 2
            },
            "end": {
              "line": 318,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"text\""
        },
        {
          "name": "valueProperty",
          "type": "string | null | undefined",
          "description": "Property of local datasource to as the value property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 2
            },
            "end": {
              "line": 326,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"value\""
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "`value` Selected object from the suggestions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 331,
              "column": 2
            },
            "end": {
              "line": 334,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "text",
          "type": "string | null | undefined",
          "description": "The current/selected text of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 2
            },
            "end": {
              "line": 343,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "disableShowClear",
          "type": "boolean | null | undefined",
          "description": "Disable showing the clear X button",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 348,
              "column": 2
            },
            "end": {
              "line": 351,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "remoteSource",
          "type": "boolean | null | undefined",
          "description": "Binds to a remote data source",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 356,
              "column": 2
            },
            "end": {
              "line": 359,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "eventNamespace",
          "type": "string | null | undefined",
          "description": "Event type separator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 364,
              "column": 2
            },
            "end": {
              "line": 367,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"-\""
        },
        {
          "name": "minLength",
          "type": "number | null | undefined",
          "description": "Minimum length to trigger suggestions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 2
            },
            "end": {
              "line": 375,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "pattern",
          "type": "string | null | undefined",
          "description": "`pattern` Pattern to validate input field",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 380,
              "column": 2
            },
            "end": {
              "line": 380,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "allowedPattern",
          "type": "string | null | undefined",
          "description": "allowedPattern` allowedPattern to validate input field",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 385,
              "column": 2
            },
            "end": {
              "line": 385,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "charCounter",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to show a character counter.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 390,
              "column": 2
            },
            "end": {
              "line": 393,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "maxlength",
          "type": "number | null | undefined",
          "description": "The maximum length of the input value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 2
            },
            "end": {
              "line": 400,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Name to be used by the autocomplete input. This is necessary if wanted to be integrated with iron-form.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 2
            },
            "end": {
              "line": 405,
              "column": 14
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "queryFn",
          "type": "Function | null | undefined",
          "description": "Function used to filter available items. This function is actually used by paper-autocomplete-suggestions,\nit is also exposed here so it is possible to provide a custom queryFn.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 2
            },
            "end": {
              "line": 413,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          }
        },
        {
          "name": "highlightFirst",
          "type": "boolean | null | undefined",
          "description": "If `true`, it will always highlight the first result each time new suggestions are presented.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 418,
              "column": 2
            },
            "end": {
              "line": 421,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "showResultsOnFocus",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to show available suggestions on focus. This overrides the default behavior that only shows\nnotifications after user types",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 427,
              "column": 2
            },
            "end": {
              "line": 430,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_value",
          "type": "?",
          "description": "TODO: check if we need _value and _text properties. It seems they can be removed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 436,
              "column": 2
            },
            "end": {
              "line": 438,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_text",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 440,
              "column": 2
            },
            "end": {
              "line": 442,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_isClearButtonVisible",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the clear button is visible or not",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 447,
              "column": 2
            },
            "end": {
              "line": 450,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_isSuggestionsOpened",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the suggestion popup is visible or not.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 455,
              "column": 2
            },
            "end": {
              "line": 458,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "selectedOption",
          "type": "Object | null | undefined",
          "description": "Object containing the information of the currently selected option",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 2
            },
            "end": {
              "line": 466,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_sourceChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 473,
              "column": 1
            },
            "end": {
              "line": 487,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newSource"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ready",
          "description": "Element Lifecycle",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 490,
              "column": 1
            },
            "end": {
              "line": 497,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clear",
          "description": "Clears the input text",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 502,
              "column": 1
            },
            "end": {
              "line": 521,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_fireEvent",
          "description": "Dispatches autocomplete events",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 526,
              "column": 1
            },
            "end": {
              "line": 537,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "option"
            },
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_textObserver",
          "description": "On text event handler",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 542,
              "column": 1
            },
            "end": {
              "line": 548,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onAutocompleteSelected",
          "description": "On autocomplete selection",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 553,
              "column": 1
            },
            "end": {
              "line": 558,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showClearButton",
          "description": "Show the clear button (X)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 563,
              "column": 1
            },
            "end": {
              "line": 574,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hideClearButton",
          "description": "Hide the clear button (X)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 579,
              "column": 1
            },
            "end": {
              "line": 586,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 588,
              "column": 1
            },
            "end": {
              "line": 594,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getOption",
          "description": "Gets the current text/value option of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 604,
              "column": 1
            },
            "end": {
              "line": 609,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Object"
          }
        },
        {
          "name": "setOption",
          "description": "Sets the current text/value option of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 615,
              "column": 1
            },
            "end": {
              "line": 619,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "option",
              "type": "Object"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disable",
          "description": "Disables the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 624,
              "column": 1
            },
            "end": {
              "line": 626,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "enable",
          "description": "Enables the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 631,
              "column": 1
            },
            "end": {
              "line": 633,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "suggestions",
          "description": "Sets the component's current suggestions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 639,
              "column": 1
            },
            "end": {
              "line": 641,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "Array"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "validate",
          "description": "Validates the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 647,
              "column": 1
            },
            "end": {
              "line": 649,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean"
          }
        },
        {
          "name": "clear",
          "description": "Clears the current input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 654,
              "column": 1
            },
            "end": {
              "line": 658,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "reset",
          "description": "Resets the current input (DEPRECATED: please use clear)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 663,
              "column": 1
            },
            "end": {
              "line": 665,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hideSuggestions",
          "description": "Hides the suggestions popup",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 670,
              "column": 1
            },
            "end": {
              "line": 673,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "onSelectHandler",
          "description": "Allows calling the onSelect function from outside\nThis in time triggers the autocomplete-selected event\nwith all the data required",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 680,
              "column": 1
            },
            "end": {
              "line": 682,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 130,
          "column": 8
        },
        "end": {
          "line": 733,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "auto-validate",
          "description": "`autoValidate` Set to true to auto-validate the input value.",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 2
            },
            "end": {
              "line": 224,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "invalid",
          "description": "Setter/getter manually invalid input",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 2
            },
            "end": {
              "line": 232,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "autocapitalize",
          "description": "`autocapitalize` Sets auto-capitalization for the input element.",
          "sourceRange": {
            "start": {
              "line": 236,
              "column": 2
            },
            "end": {
              "line": 236,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "error-message",
          "description": "`errorMessage` The error message to display when the input is invalid.",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 2
            },
            "end": {
              "line": 243,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "label",
          "description": "`label` Text to display as the input label",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 2
            },
            "end": {
              "line": 248,
              "column": 15
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "no-label-float",
          "description": "`noLabelFloat` Set to true to disable the floating label.",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "always-float-label",
          "description": "`alwaysFloatLabel` Set to true to always float label",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 2
            },
            "end": {
              "line": 264,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "placeholder",
          "description": "The placeholder text",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 2
            },
            "end": {
              "line": 269,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "required",
          "description": "`required` Set to true to mark the input as required.",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 2
            },
            "end": {
              "line": 277,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "readonly",
          "description": "`readonly` Set to true to mark the input as readonly.",
          "sourceRange": {
            "start": {
              "line": 282,
              "column": 2
            },
            "end": {
              "line": 285,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "focused",
          "description": "`focused` If true, the element currently has focus.",
          "sourceRange": {
            "start": {
              "line": 290,
              "column": 2
            },
            "end": {
              "line": 294,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "disabled",
          "description": "`disabled` Set to true to mark the input as disabled.",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 2
            },
            "end": {
              "line": 302,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "source",
          "description": "`source` Array of objects with the options to execute the autocomplete feature",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 2
            },
            "end": {
              "line": 310,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "text-property",
          "description": "Property of local datasource to as the text property",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 2
            },
            "end": {
              "line": 318,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-property",
          "description": "Property of local datasource to as the value property",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 2
            },
            "end": {
              "line": 326,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value",
          "description": "`value` Selected object from the suggestions",
          "sourceRange": {
            "start": {
              "line": 331,
              "column": 2
            },
            "end": {
              "line": 334,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "text",
          "description": "The current/selected text of the input",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 2
            },
            "end": {
              "line": 343,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "disable-show-clear",
          "description": "Disable showing the clear X button",
          "sourceRange": {
            "start": {
              "line": 348,
              "column": 2
            },
            "end": {
              "line": 351,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "remote-source",
          "description": "Binds to a remote data source",
          "sourceRange": {
            "start": {
              "line": 356,
              "column": 2
            },
            "end": {
              "line": 359,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "event-namespace",
          "description": "Event type separator",
          "sourceRange": {
            "start": {
              "line": 364,
              "column": 2
            },
            "end": {
              "line": 367,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "min-length",
          "description": "Minimum length to trigger suggestions",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 2
            },
            "end": {
              "line": 375,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "pattern",
          "description": "`pattern` Pattern to validate input field",
          "sourceRange": {
            "start": {
              "line": 380,
              "column": 2
            },
            "end": {
              "line": 380,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "allowed-pattern",
          "description": "allowedPattern` allowedPattern to validate input field",
          "sourceRange": {
            "start": {
              "line": 385,
              "column": 2
            },
            "end": {
              "line": 385,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "char-counter",
          "description": "Set to `true` to show a character counter.",
          "sourceRange": {
            "start": {
              "line": 390,
              "column": 2
            },
            "end": {
              "line": 393,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "maxlength",
          "description": "The maximum length of the input value.",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 2
            },
            "end": {
              "line": 400,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "name",
          "description": "Name to be used by the autocomplete input. This is necessary if wanted to be integrated with iron-form.",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 2
            },
            "end": {
              "line": 405,
              "column": 14
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "query-fn",
          "description": "Function used to filter available items. This function is actually used by paper-autocomplete-suggestions,\nit is also exposed here so it is possible to provide a custom queryFn.",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 2
            },
            "end": {
              "line": 413,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Function | null | undefined"
        },
        {
          "name": "highlight-first",
          "description": "If `true`, it will always highlight the first result each time new suggestions are presented.",
          "sourceRange": {
            "start": {
              "line": 418,
              "column": 2
            },
            "end": {
              "line": 421,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "show-results-on-focus",
          "description": "Set to `true` to show available suggestions on focus. This overrides the default behavior that only shows\nnotifications after user types",
          "sourceRange": {
            "start": {
              "line": 427,
              "column": 2
            },
            "end": {
              "line": 430,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "selected-option",
          "description": "Object containing the information of the currently selected option",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 2
            },
            "end": {
              "line": 466,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "autocomplete-blur",
          "description": "Fired on input blur",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-change",
          "description": "Fired on input change",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-focus",
          "description": "Fired on input focus",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-reset-blur",
          "description": "Fired on input reset/clear",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-selected",
          "description": "Fired when a selection is made",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "focused-changed",
          "description": "Fired when the `focused` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "text-changed",
          "description": "Fired when the `text` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-option-changed",
          "description": "Fired when the `selectedOption` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-autocomplete"
    }
  ]
}
